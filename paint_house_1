class Solution{
    public int minimum(int[][]cost){
        if(cost==null || cost.length==0){
            return 0;
        }
        int red=recurse(cost,0,0,0);
        int green=recurse(cost,0,1,0);
        int blue=recurse(cost,0,2,0);
        return Math.min(red,Math.min(green,blue));
    }
    private int recurse(int cost[][],int row,int col,int tc){
        if(row==cost.length){
            return tc;
        }

        if(col==0){
            return Math.min(recurse(cost,row+1,1,tc+cost[row][col]),recurse(cost,row+1,2,tc+cost[row][col]));
        }
        else if(col==1){
            return Math.min(recurse(cost,row+1,0,tc+cost[row][col]),recurse(cost,row+1,2,tc+cost[row][col]));
        }
        else{
            return Math.min(recurse(cost,row+1,0,tc+cost[row][col]),recurse(cost, row+1, 1, tc+cost[row][col]));
        }
    }

    public static void main(String[] args) {
        int a1[][]={{17,2,17},{16,5,16},{14,3,19}};
        //int a2[][]={ {11, 13, 20}, {13, 20, 12}, {15, 18, 9}, {8, 1, 2}, {20, 18, 20}, {5, 15, 1}, {1, 12, 18}, {2, 21, 8}, {3, 20, 12}, {5, 16, 14}, {11, 7, 9}, {16, 6, 11}, {12, 9, 9}, {11, 18, 13}, {16, 12, 17}, {8, 6, 12}, {6, 5, 7}, {12, 17, 4}, {5, 20, 1}, {4, 7, 15}, {4, 16, 21}, {2, 11, 20}, {5, 18, 14}, {11, 15, 11}, {6, 6, 14}, {13, 11, 19}, {2, 16, 16}, {3, 10, 11} };

        Solution a = new Solution();
        System.out.println(a.minimum(a1));
        //System.out.println(a.minimum(a2)); /*in leetcode,it will get runtime exceeded*/
    }
}
